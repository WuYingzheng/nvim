#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>
''' search with ag in current folder '''

import argparse
import sys
import os
sys.path.append('.')
import util


class Srch:
    def __init__(self):
        self.name = util.get_command_name()
        slash = None
        if util.is_windows():
            slash = '\\'
        else:
            slash = '/'
        self.db = util.get_command_home() + slash + 'srch.ignore'
        self.parser = argparse.ArgumentParser(description='Search text in current folder by ag')
        self.parser.add_argument(
            '-d',
            '--depth',
            dest='depth',
            type=int,
            default=1,
            help='*optional* search in folder [depth], by default 1')
        self.parser.add_argument('-t', '--text', dest='text', help='search all [text]')
        self.parser.add_argument('-c',
                                 '--count',
                                 dest='count',
                                 help='search file count that contains [text]')
        self.parser.add_argument('-f',
                                 '--file',
                                 dest='file_name',
                                 help='search file names that contains [text]')
        self.parser.add_argument('-w', '--word', dest='word', help='search all [word]')
        self.parser.add_argument('-i',
                                 '--ignore',
                                 dest='ignore',
                                 help='ignore [filetype] for searcher')
        self.parser.add_argument(
            '-p',
            '--purge',
            default=None,
            action='store_true',
            dest='purge',
            help='purge all filetypes ignored for searcher')
        self.parser.add_argument(
            '-s',
            '--show',
            default=None,
            action='store_true',
            dest='show',
            help='show all filetypes ignored for searcher')

    def parse(self):
        return self.parser.parse_args()

    def text(self, text, depth):
        os.system('ag --smart-case --depth -%d -p %s %s .' %
                  (depth, self.db, text))

    def count(self, text, depth):
        os.system('ag -c --smart-case --depth -%d -p %s %s .' %
                  (depth, self.db, text))

    def file_name(self, text, depth):
        os.system('ag -l --smart-case --depth -%d -p %s %s .' %
                  (depth, self.db, text))

    def word(self, word, depth):
        os.system('ag -w --smart-case --depth -%d -p %s %s .' %
                  (depth, self.db, word))

    def ignore(self, filetype):
        if not filetype.startswith('.'):
            filetype = '.%s' % filetype
        filetype = '%s\n' % filetype.strip()
        util.append_file(self.db, filetype)

    def purge(self):
        util.purge_file(self.db)

    def show(self):
        ignore_list = util.readlines_file(self.db)
        ignore_list = [x.strip() for x in ignore_list]
        ignore_str = ' '.join(ignore_list).strip()
        print('[lin-boost] search ignore: %s' % (None if len(ignore_str) == 0 else ignore_str))


if __name__ == '__main__':
    srch = Srch()
    args = srch.parse()
    if args.text is not None:
        'srch -t/--text [text]'
        srch.text(args.text, args.depth)
    if args.count is not None:
        'srch -c/--count [text]'
        srch.count(args.count, args.depth)
    elif args.file_name is not None:
        'srch -f/--file [text]'
        srch.file_name(args.file_name, args.depth)
    elif args.word is not None:
        'srch -w/--word [text]'
        srch.word(args.word, args.depth)
    elif args.ignore is not None:
        'srch -i/--ignore [text]'
        srch.ignore(args.ignore)
    elif args.purge is True:
        'srch -p/--purge'
        srch.purge()
    elif args.show is True:
        'srch -s/--show'
        srch.show()
