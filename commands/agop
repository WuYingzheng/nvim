#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import sys
import os
import getopt
sys.path.append('.')
import util

slash = '\\' if util.is_windows() else '/'
db = util.get_command_home() + slash + 'agop.ignore'

help_msg = '''Searching in current folder by ag.

usage:
    agop [option] <text>            search all <text>.
    agop [option] -w/--word <word>  search all <word>.
    agop [option] -c/--count <text> search files and occurrences that contains <text>.
    agop [option] -f/--file <text>  search files that contains <text>.
    agop -i/--ignore <filetype>     add <filetype> in searcher ignore configuration.

option:
    -r/--recursive                  searching recursively from current folder, by default False.

flag:
    agop -p/--purge                 purge all filetypes in searcher configuration.
    agop -s/--show                  show all filetypes in searcher configuration.
    agop -h/--help                  show help message.
'''


def _help():
    print(help_msg)
    exit(0)


def _text(text, depth):
    os.system('ag --smart-case --depth %d -p %s %s .' % (depth, db, text))
    exit(0)


def _count(text, depth):
    os.system('ag -c --smart-case --depth %d -p %s %s .' % (depth, db, text))
    exit(0)


def _file(text, depth):
    os.system('ag -l --smart-case --depth %d -p %s %s .' % (depth, db, text))
    exit(0)


def _word(word, depth):
    os.system('ag -w --smart-case --depth %d -p %s %s .' % (depth, db, word))
    exit(0)


def _ignore(filetype):
    if not filetype.startswith('.'):
        filetype = '.%s' % filetype
    filetype = '%s\n' % filetype.strip()
    util.append_file(db, filetype)
    exit(0)


def _purge():
    util.purge_file(db)
    exit(0)


def _show():
    ignore_list = util.readlines_file(db)
    ignore_list = [x.strip() for x in ignore_list]
    ignore_str = ' '.join(ignore_list).strip()
    print('[lin-ops] search ignore: %s' %
          (None if len(ignore_str) == 0 else ignore_str))
    exit(0)


if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'w:c:f:i:rpsh', [
            'word=', 'count=', 'file=', 'ignore=', 'recursive', 'purge',
            'show', 'help'
        ])
        depth = 1
        for opt in opts:
            if opt[0] in ('-r', '--recursive'):
                depth = 99
                break
        for opt in opts:
            if opt[0] in ('-w', '--word'):
                _word(opt[1], depth)
            elif opt[0] in ('-c', '--count'):
                _count(opt[1], depth)
            elif opt[0] in ('-f', '--file'):
                _file(opt[1], depth)
            elif opt[0] in ('-i', '--ignore'):
                _ignore(opt[1])
            elif opt[0] in ('-p', '--purge'):
                _purge()
            elif opt[0] in ('-s', '--show'):
                _show()
            elif opt[0] in ('-h', '--help'):
                _help()
        _text(args[0], depth)
    except getopt.GetoptError as e:
        print(str(e) + '\n')
        _help()
