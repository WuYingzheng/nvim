#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import util
import sys
import os
import getopt
import time
sys.path.append('.')

help_msg = '''Generate auto complete database.

usage:
    genv -cc/--compile_commands     generate compile_commands.json based on CMakeLists.txt for C/C++.
    genv -cf/--compile_flags        generate compile_flags.txt for C/C++.

flag:
    genv -h/--help      show help message.
'''


def _help():
    print(help_msg)
    exit(0)


def _compile_commands():
    print('[vcmd] generate compile_commands.json for c/c++')
    gen_folder = '.genv.%s' % (str(time.time()))
    os.system('cmake -B %s -DCMAKE_EXPORT_COMPILE_COMMANDS=ON .' %
              (gen_folder))
    if not os.path.exists('%s/compile_commands.json' % (gen_folder)):
        raise Exception('%s/compile_commands.json not exist' % (gen_folder))
    os.system('cp %s/compile_commands.json .' % (gen_folder))
    os.system('rm -rf %s' % (gen_folder))
    print('[vcmd] generate compile_commands.json for c/c++ - done')
    exit(0)


def _compile_flags():
    exit(0)


if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'c:h', [
                                   'compile_commands', 'compile_flags', 'help'])
        for opt in opts:
            if opt[0] == '-c':
                if opt[1] == 'c':
                    _compile_commands()
                elif opt[1] == 'f':
                    _compile_flags()
            elif opt[0] == '--compile_commands':
                _compile_commands()
            elif opt[0] == '--compile_flags':
                _compile_flags()
        _help()
    except getopt.GetoptError as e:
        print(str(e) + '\n')
        _help()
    except Exception as e:
        print(str(e) + '\n')
