#! /usr/bin/env python3
# -*- coding:utf-8 -*-
# Copyright 2018-  <linrongbin16@gmail.com>

import sys
import getopt
import os
import time
import shutil

sys.path.append(".")
import util


def _help():
    msg = """usage: vgen [option]

  Generate common configurations.

option:
  -c/--clangd                           generate 'compile_commands.json' for clangd
                                        generate 'compile_flags.txt' otherwise if
                                        'CMakeLists.txt' not available or on Windows
                                        Visual Studio toolchain
  -s/--sshkey [email]                   generate '~/.ssh/id_rsa' and '~/.ssh/id_rsa.pub'
                                        for email
  -m/--mirror [country/region]          generate mirrors of pip(python) and
                                        homebrew(macos) for [country/region]

  -h/--help                             show help message

country/region:
  china

example:
  $ vgen -s linrongbin16@outlook.com
  Generating public/private rsa key pair.
  Enter file in which to save the key (/Users/linrongbin/.ssh/id_rsa):
  Enter passphrase (empty for no passphrase):
  Enter same passphrase again:
  Your identification has been saved in /Users/linrongbin/.ssh/id_rsa
  Your public key has been saved in /Users/linrongbin/.ssh/id_rsa.pub
  The key fingerprint is:
  SHA256:LiSwQUBzThXXXXXXXXXXXXXXXXXXXXHQxTNow3o61W8 linrongbin16@outlook.com
  The key's randomart image is:
  +---[RSA 4096]----+
  |XXXXXXXXXX       |
  | XXXXXXXXXX      |
  |  XXXXXXXXXX     |
  |   XXXXXXXX      |
  |  XXXXXXXXX      |
  |     XXXXXXX     |
  |      XXXXX      |
  |       X         |
  |                 |
  +----[SHA256]-----+
"""
    print(msg)
    exit(0)


def is_ascii_char(s):
    return all(ord(c) < 128 for c in s)


def header_path(s):
    if util.is_windows():
        return '-I"%s"' % (s)
    else:
        return "-I%s" % (s)


def os_listdir_wrapper(d):
    try:
        return os.listdir(d)
    except:
        return []


def git_repo_headers():
    try:
        root, _ = util.run("git", "rev-parse", "--show-toplevel")
        root = root[0].strip()
        hds = util.list_dirs(root, False, 3)
        return [header_path(x) for x in hds]
    except:
        return []


def windows_sdk_headers():
    hds = []
    # -I"C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.14.26428\\include"
    for release in os_listdir_wrapper(
            "C:\\Program Files (x86)\\Microsoft Visual Studio\\"):
        current_release = (
            "C:\\Program Files (x86)\\Microsoft Visual Studio\\%s\\Community\\VC\\Tools\\MSVC\\"
            % (release))
        if not os.path.exists(current_release):
            continue
        if not os.path.isdir(current_release):
            continue
        for version in os_listdir_wrapper(current_release):
            current_version = (
                "C:\\Program Files (x86)\\Microsoft Visual Studio\\%s\\Community\\VC\\Tools\\MSVC\\%s\\include"
                % (release, version))
            if not os.path.exists(current_version) or not os.path.isdir(
                    current_version):
                continue
            hds.append(header_path(current_version))
    # -I"C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17134.0\\ucrt"
    for version in os_listdir_wrapper(
            "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\"):
        current_version = (
            "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\%s\\ucrt" %
            (version))
        if not os.path.exists(current_version) or not os.path.isdir(
                current_version):
            continue
        hds.append(header_path(current_version))
    # C:\\Program Files\\LLVM headers
    win_clang_list = [
        "C:\\Program Files\\LLVM\\include\\clang-c",
        "C:\\Program Files\\LLVM\\include\\llvm",
        "C:\\Program Files\\LLVM\\include\\llvm-c",
    ]
    for hd in win_clang_list:
        if not os.path.exists(current_version) or not os.path.isdir(
                current_version):
            continue
        hds.append(header_path(hd))
    return hds


def current_headers():
    hds = []
    hds.append(header_path("."))
    for f in util.list_files(".", False, 3):
        hds.append(header_path(f))
    return hds


def _compile_commands():
    gen_folder = ".vgen.%s" % (str(time.time()))
    os.system("cmake -B %s -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ." %
              (gen_folder))
    if not os.path.exists("%s/compile_commands.json" % (gen_folder)):
        raise Exception("%s/compile_commands.json not exist" % (gen_folder))
    shutil.copyfile("%s/compile_commands.json" % (gen_folder),
                    "compile_commands.json")
    shutil.rmtree(gen_folder, ignore_errors=True)
    print("'compile_commands.json' generated")


def _compile_flags():
    fp = open("compile_flags.txt", "w")
    c = current_headers()
    w = windows_sdk_headers()
    g = git_repo_headers()
    for x in c:
        fp.write(x + "\n")
    for x in w:
        fp.write(x + "\n")
    for x in g:
        fp.write(x + "\n")
    fp.close()
    print("'compile_flags.txt' generated")


def _clangd():
    if util.is_windows() or not os.path.exists("CMakeLists.txt"):
        _compile_flags()
    else:
        _compile_commands()
    exit(0)


def _sshkey(email):
    os.system("ssh-keygen -t rsa -b 4096 -C '%s'" % email)
    os.system("touch ~/.ssh/authorized_keys")
    os.system("chmod -R 700 ~/.ssh")
    os.system("chmod 600 ~/.ssh/authorized_keys")
    os.system("chmod 600 ~/.ssh/id_rsa")
    os.system("chmod 600 ~/.ssh/id_rsa.pub")
    exit(0)


def _mirror(country):
    brew_mirror = {
        "china": [
            'git -C "$(brew --repo)" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git',
            'git -C "$(brew --repo homebrew/core)" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git',
            'git -C "$(brew --repo homebrew/cask)" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git',
            'git -C "$(brew --repo homebrew/cask-fonts)" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-fonts.git',
            'git -C "$(brew --repo homebrew/cask-drivers)" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-drivers.git',
            'git -C "$(brew --repo homebrew/cask-versions)" remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask-versions.git',
        ],
    }
    pip_mirror = {
        "china": [
            "pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple",
        ],
    }
    if country in brew_mirror:
        for cmd in brew_mirror[country]:
            os.system(cmd)
    if country in pip_mirror:
        for cmd in pip_mirror[country]:
            os.system(cmd)
    exit(0)


if __name__ == "__main__":
    try:
        opts, args = getopt.getopt(sys.argv[1:], "csm:h",
                                   ["clangd", "sshkey", "mirror=", "help"])
        for opt in opts:
            if opt[0] in ("-h", "--help"):
                continue
        for opt in opts:
            if opt[0] in ("-c", "--clangd"):
                _clangd()
            elif opt[0] in ("-s", "--sshkey"):
                _sshkey(args[0])
            elif opt[0] in ("-m", "--mirror"):
                _mirror(opt[1])
        _help()
    except getopt.GetoptError as e:
        print(e)
        _help()
    except Exception as e:
        print(e)
